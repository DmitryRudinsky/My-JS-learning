// По спецификации, в качестве ключей для свойств объекта могут использоваться только
// строки или символы. Ни числа, ни логические значения не подходят, разрешены только эти
// два типа данных.
// До сих пор мы видели только строки. Теперь давайте разберём символы, увидим, что
// хорошего они нам дают.

let id = Symbol("id");


// Символы позволяют создавать «скрытые» свойства объектов, к которым нельзя нечаянно
// обратиться и перезаписать их из других частей программы.

let user = {
    name: "Вася"
};

let id1 = Symbol("id1");

user[id1] = 14;

alert(user[id1]); //14


// Если мы хотим использовать символ при литеральном объявлении объекта {...} , его
// необходимо заключить в квадратные скобки.

let id2 = Symbol();

let user2 = {
    name: "Петя",
    [id2]: 28
};

alert(user2[id2]) //28

// Символы игнорируются циклом for…in
// Свойства, чьи ключи – символы, не перебираются циклом for..in 

// А вот Object.assign  , в отличие от цикла for..in , копирует и строковые, и символьные свойства:

let iq = Symbol();
let admin = {
    name: "Hacker",
    [iq]: "<100"
};

let copyAdmin = Object.assign({}, admin);

alert(copyAdmin[iq]); //<100

// Итак, как мы видели, обычно все символы уникальны, даже если их имена совпадают. Но
// иногда мы наоборот хотим, чтобы символы с одинаковыми именами были одной
// сущностью.
// Для этого существует глобальный реестр символов. Мы можем создавать в нём символы
// и обращаться к ним позже, и при каждом обращении нам гарантированно будет
// возвращаться один и тот же символ.
// Для чтения (или, при отсутствии, создания) символа из реестра используется вызов
// Symbol.for(key) .
// Он проверяет глобальный реестр и, при наличии в нём символа с именем key ,
// возвращает его, иначе же создаётся новый символ Symbol(key) и записывается в
// реестр под ключом key .

let id666 = Symbol.for("id");
let id666Again = Symbol.for("id");
alert(id666 == id666Again); //true

//получаем символ по имени 
let fatherName = Symbol.for("FatherName");
let fatherIq = Symbol.for("FatherIq");

//получаем имя по символу

alert(Symbol.keyFor(fatherName)); //FatherName
alert(Symbol.keyFor(fatherIq)); //FatherIq

