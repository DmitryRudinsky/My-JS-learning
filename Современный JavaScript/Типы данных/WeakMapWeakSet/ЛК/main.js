// WeakMap
// Первое его отличие от Map в том, что ключи в WeakMap должны быть объектами, а не
// примитивными значениями:

let weakMap = new WeakMap();
let obj = {};
weakMap.set(obj, 'ok');

// Теперь, если мы используем объект в качестве ключа и если больше нет ссылок на этот
// объект, то он будет удалён из памяти (и из объекта WeakMap ) автоматически.

let john = { name: "John" };
weakMap.set(john, "...");
john = null;
// объект john удалён из памяти!

// WeakMap не поддерживает перебор и методы keys() , values() , entries() , так что
// нет способа взять все ключи или значения из неё.
// В WeakMap присутствуют только следующие методы:
// weakMap.get(key)
// weakMap.set(key, value)
// weakMap.delete(key)
// weakMap.has(key)

// В основном, WeakMap используется в качестве дополнительного хранилища данных.
// Если мы работаем с объектом, который «принадлежит» другому коду, может быть даже
// сторонней библиотеке, и хотим сохранить у себя какие-то данные для него, которые
// должны существовать лишь пока существует этот объект, то WeakMap – как раз то, что
// нужно.

// Мы кладём эти данные в WeakMap , используя объект как ключ, и когда сборщик мусора
// удалит объекты из памяти, ассоциированные с ними данные тоже автоматически исчезнут.

// Коллекция WeakSet ведёт себя похоже:
// Она аналогична Set , но мы можем добавлять в WeakSet только объекты (не
// примитивные значения).
// Объект присутствует в множестве только до тех пор, пока доступен где-то ещё.
// Как и Set , она поддерживает add , has и delete , но не size , keys() и не
// является перебираемой.


