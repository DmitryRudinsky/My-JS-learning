// Как мы помним, новые объекты могут быть созданы с помощью функции-конструктора new
// F() .
// Если в F.prototype содержится объект, оператор new устанавливает его в качестве
// [[Prototype]] для нового объекта.

let animal = {
    eats: true
};
function Rabbit(name) {
    this.name = name;
}
Rabbit.prototype = animal;
let rabbit = new Rabbit("White Rabbit"); // rabbit.__proto__ == animal
alert( rabbit.eats ); // true

// Установка Rabbit.prototype = animal буквально говорит интерпретатору
// следующее: "При создании объекта через new Rabbit() запиши ему animal в
// [[Prototype]] ".

// F.prototype используется только при вызове new F() и присваивается в качестве
// свойства [[Prototype]] нового объекта. После этого F.prototype и новый объект
// ничего не связывает. Следует понимать это как «единоразовый подарок» объекту.
// После создания F.prototype может измениться, и новые объекты, созданные с
// помощью new F() , будут иметь другой объект в качестве [[Prototype]] , но уже
// существующие объекты сохранят старый.


