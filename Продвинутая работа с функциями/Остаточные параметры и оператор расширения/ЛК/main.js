// Остаточные параметры могут быть обозначены через три точки ... . Буквально это
// значит: «собери оставшиеся параметры и положи их в массив».
// Например, соберём все аргументы в массив args :


function sumAll(...args){
    let sm = 0;
    for(let num of args) sm += num;
    return sm;
}

alert( sumAll(1, 2, 3) ); //6


// Мы можем положить первые несколько параметров в переменные, а остальные – собрать
// в массив.

function showName(firstName, lastName, ...titles){
    alert(firstName + ' ' + lastName); //Юлий Цезарь
    alert(titles.length); //2
    alert(titles[0]); //Консул
}

showName("Юлий", "Цезарь", "Консул", "Император");


// Остаточные параметры собирают все остальные аргументы, поэтому бессмысленно
// писать что-либо после них. Это вызовет ошибку: ...rest должен всегда быть последним.


// Оператор расширения

// Он похож на остаточные параметры – тоже
// использует ... , но делает совершенно противоположное.
// Когда ...arr используется при вызове функции, он «расширяет» перебираемый объект
// arr в список аргументов.

let arr1 = [5, 10, 14, 1000, 0];
alert(Math.max(...arr1)); //1000

// Этим же способом мы можем передать несколько итерируемых объектов:

let arr2 = [1, 2, 3, 4, 5, 6, 10000, 8];
alert(Math.max(...arr1, ...arr2)); //10000


// Оператор расширения можно использовать и для слияния массивов:

let newArr = [0, ...arr1, ...arr2]; //0, 5, 10, 14, 1000, 0, 1, 2, 3, 4, 5, 6, 10000, 8


// В примерах выше мы использовали массив, чтобы продемонстрировать свойства
// оператора расширения, но он работает с любым перебираемым объектом.

let word = "Hello";
alert([...word]) //H,e,l,l,o

// Посмотрим, что происходит. Под капотом оператор расширения использует итераторы,
// чтобы перебирать элементы. Так же, как это делает for..of .
// Цикл for..of перебирает строку как последовательность символов, поэтому из ...str
// получается "П", "р", "и", "в", "е", "т" . Получившиеся символы собираются в
// массив при помощи стандартного объявления массива: [...str] .

