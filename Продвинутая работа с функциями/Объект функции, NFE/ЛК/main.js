// в JavaScript функция – это значение.
// Каждое значение в JavaScript имеет свой тип. А функция – это какой тип?
// В JavaScript функции – это объекты.

// Можно представить функцию как «объект, который может делать какое-то действие».


// Свойство «name»
function SayHi(){
    alert("Hi");
};

alert(SayHi.name); //SayHi

// Ещё одно встроенное свойство «length» содержит количество параметров функции в её
// объявлении.

function f1(a){}
function f2(a, b){}
function f3(a, b, c, d, ...rest){}
alert(f1.length); //1
alert(f2.length); //2
alert(f3.length); //4


// свойство counter для отслеживания общего количества вызовов

function SayHi2(){
    alert("Hi");
    SayHi2.counter++;
};

SayHi2.counter = 0;

SayHi2();
SayHi2();

alert( `Вызвана ${SayHi2.counter} раза` ); //Вызвана 2 раза

// Свойство функции, назначенное как sayHi.counter = 0 , не объявляет локальную
// переменную counter внутри неё. Другими словами, свойство counter и
// переменная let counter – это две независимые вещи.



// Named Function Expression или NFE – это термин для Function Expression, у которого есть
// имя.


// Например, давайте объявим Function Expression:
let sayHi3 = function(who) {
    alert(`Hello, ${who}`);
};
// И присвоим ему имя:
sayHi3 = function func(who) {
    alert(`Hello, ${who}`);
};

// Для начала заметим, что функция всё ещё задана как Function Expression. Добавление
// "func" после function не превращает объявление в Function Declaration, потому что
// оно все ещё является частью выражения присваивания.
// Добавление такого имени ничего не ломает.

// Есть две важные особенности имени func , ради которого оно даётся:
// 1. Оно позволяет функции ссылаться на себя же.
// 2. Оно не доступно за пределами функции.


// Например, ниже функция sayHi вызывает себя с "Guest" , если не передан параметр
// who :

let sayHi = function func(who){
    if (func(who)){
        alert(`Hello, ${who}`);
    } else{
        func("Guest");
    }
};

sayHi(); // Hello, Guest
// А вот так - не cработает:
func(); // Ошибка, func не определена (недоступна вне функции)

// Если функция объявлена как Function Expression (вне основного потока кода) и имеет имя,
// тогда это называется Named Function Expression (Именованным Функциональным
// Выражением). Это имя может быть использовано для ссылки на себя же, для рекурсивных
// вызовов и т.п.
// Также функции могут содержать дополнительные свойства. Многие известные JavaScript библиотеки искусно используют эту возможность.


