// Функции-конструкторы являются обычными функциями. Но есть два соглашения:
// 1. Имя функции-конструктора должно начинаться с большой буквы.
// 2. Функция-конструктор должна вызываться при помощи оператора "new" .
// Например:

function User (name) {
    this.name = name;
    this.IsAdmin = false;
};

let user = new User("Вася");

alert(user.name);
alert(user["IsAdmin"]);

// Когда функция вызывается как new User(...) , происходит следующее:
// 1. Создаётся новый пустой объект, и он присваивается this .
// 2. Выполняется код функции. Обычно он модифицирует this , добавляет туда новые
// свойства.
// 3. Возвращается значение this .

// Теперь, когда нам необходимо будет создать других пользователей, мы можем
// использовать new User("Маша") , new User("Даша") и т.д. Данная конструкция
// гораздо удобнее и читабельнее, чем каждый раз создавать литерал объекта. Это и
// является основной целью конструкторов – удобное повторное создание однотипных
// объектов.

// Используя специальное свойство new.target внутри функции, мы можем проверить,
// вызвана ли функция при помощи оператора new или без него.


// Использование конструкторов для создания объектов даёт большую гибкость. Можно
// передавать конструктору параметры, определяющие, как создавать объект, и что в него
// записывать.
// В this мы можем добавлять не только свойства, но и методы.


function User1(name) {
    this.name = name;
    this.SayHi = function() {
        alert(`Меня зовут: ${this.name}`)
    };
}

let vasya = new User1("Вася");
vasya.SayHi();