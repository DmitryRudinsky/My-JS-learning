"В данной главе наш проект - построить автомат, небольшую программу, которая выполняет задачу в виртуальном мире."
"Наш автомат будет роботом почты доставки, принимающим и отправляющим посылки."

let roads = [
    "Дом Алисы-Дом Боба", "Дом Алисы-Склад",
    "Дом Алисы-Почта", "Дом Боба-Ратуша",
    "Дом Дарии-Дом Эрни", "Дом Дарии-Ратуша",
    "Дом Эрни-Дом Греты", "Дом Греты-Ферма",
    "Дом Греты-Магазин", "Рынок-Ферма",
    "Рынок-Почта", "Рынок-Магазин",
    "Рынок-Ратуша", "Магазин-Ратуша",
]


function buildGraph(edges){
    let graph = Object.create(null); //Создаём объект без прототипа
    function addEdge(from, to){ //Заводим функцию addEdge
        if (graph[from] == null){ //Если в объекту graph, у свойства from нет значение
            graph[from] = [to]; //то его первым значением будет выступать массив из одного элемента [to]
        } else{ //Если же у свойства есть значение, в нашем случае это массив мест из from
            graph[from].push(to);//То к имеющемуся массиву добавляем новый элемент
        }
    }

    for(let [from, to] of edges.map(r => r.split("-"))){ //Проходимся по массиву edges, разделяя каждый его элемент на 2 других при помощи метода split: from и to
        addEdge(from, to); //Добавляем в объект graph пункты из from в to
        addEdge(to, from); //И наоборот
    }
    return graph; //Выводим объект
}

const roadGraph = buildGraph(roads);
/*
[Object: null prototype] {
  'Дом Алисы': [ 'Дом Боба', 'Склад', 'Почта' ],
  'Дом Боба': [ 'Дом Алисы', 'Ратуша' ],
  'Склад': [ 'Дом Алисы' ],
  'Почта': [ 'Дом Алисы', 'Рынок' ],
  'Ратуша': [ 'Дом Боба', 'Дом Дарии', 'Рынок', 'Магазин' ],
  'Дом Дарии': [ 'Дом Эрни', 'Ратуша' ],
  'Дом Эрни': [ 'Дом Дарии', 'Дом Греты' ],
  'Дом Греты': [ 'Дом Эрни', 'Ферма', 'Магазин' ],
  'Ферма': [ 'Дом Греты', 'Рынок' ],
  'Магазин': [ 'Дом Греты', 'Рынок', 'Ратуша' ],
  'Рынок': [ 'Ферма', 'Почта', 'Магазин', 'Ратуша' ]
}
*/

"Функция buildGraph принимает массив рёбер и создаёт для него объект словаря, в котором каждому узлу соответствует массив"
"связанных с ним узлов."

"Сведём состояние деревни к минимальному набору значений, его определяюших."

class VillageState{
    constructor(place, parcels){
        this.place = place; //Текущее положение робота
        this.parcels = parcels; //Множество недоставленных посылок, каждая их которых имеет текущее положение и адрес назначения
    }

    move(destination){ //destination - место, в которое нужно будет пойти. Пункт назначения
        if(!roadGraph[this.place].includes(destination)){ //Проверка: если пункт назначения не соединён дорогой с текущем положением робота
            return this; // Возвращаем старое состояние, так как это недопустимый ход.
        } else{ //В ином случае
            let parcels = this.parcels.map(p => { //Проходим по каждому элементу массива множества недоставленных посылок.
                if(p.place != this.place) return p; //Если адрес текущего положения посылки не равен текущему положению робота, возвращаем в новый массив множества элемент без изменений.
                return {place: destination, address: p.address} //Иначе текущее положение посылки = пункту назначения, а адрем остаётся таким же
            }).filter(p => p.place != p.address); //Если текущее положение посылки != адресу доставки, оставляем их в массиве.
            return new VillageState(destination, parcels); //Возвращаем новое состояние, при котором текущее положение робота=пункту назначения,
            //а старое множество недоставленных посылок заменено новым.
        }
    }
}


let first = new VillageState("Почта", [{place: "Почта", address: "Дом Алисы"}, {place: "Дом Алисы", address: "Дом Боба"}, {place: "Дом Боба", address: "Ратуша"}]);
console.log(first);

/*
VillageState {
  place: 'Почта',
  parcels: [
    { place: 'Почта', address: 'Дом Алисы' },
    { place: 'Дом Алисы', address: 'Дом Боба' },
    { place: 'Дом Боба', address: 'Ратуша' }
  ]
}
*/

let second = first.move("Дом Алисы"); 
console.log(second);
/*
VillageState {
  place: 'Дом Алисы',
  parcels: [
    { place: 'Дом Алисы', address: 'Дом Боба' },
    { place: 'Дом Боба', address: 'Ратуша' }
  ]
}
*/

let third = second.move("Дом Боба");
console.log(third);
/*
VillageState {
  place: 'Дом Боба',
  parcels: [ { place: 'Дом Боба', address: 'Ратуша' } ]
}
*/
let fourth = third.move("Ратуша");
console.log(fourth); //VillageState { place: 'Ратуша', parcels: [] }

"В данном примере Робот прошёл следующий путь: Почта -> Дом Алисы -> Дом Боба -> Ратушка"



"Результатом перемещения является доставка посылки, и это отражается в следующем состоянии."
"Но исходное состояние по-прежнему описывает ситуацию, когда робот находится на почте, а посылка не доставлена."


"Поскольку мы хотим, чтобы роботы запоминали какие-то вещи, чтобы составлять и выполнять планы,"
"мы также передаём им их память и позволяем возвращать новую память."

function runRobot(state, robot, memory){
    for(let turn = 0;;turn++){ //Заводим цикл попыток(случайных движений робота в случайных направлениях)
        if(state.parcels.length == 0){  //Если длина множества недоставленных посылок в объекте класса VillageState == 0
            console.log(`Выполнено за ${turn} ходов`); //Выводим, за сколько ходом мы доставили эти посылки
            break; // Заканчиваем цикл
        } //В ином случае
        let action = robot(state, memory); //пусть action = объект со свойством direction, значением которого будет случайное место назначения из точки state.place в массиве roadGrapg
        state = state.move(action.direction); //Двигаемся в сторону того случайного направления из action и получаем новое состояние, из которого будем двигаться в следующей итерации
        memory = action.memory;
        console.log(`Переход в направлении ${action.direction}`); //выводим направление, в сторону которого мы двигаемся
    }
}

function randomPick(array){ //Функция randomPick принимает массив
    let choice = Math.floor(Math.random() * array.length); //choice = случайному индексу принятого массива
    return array[choice]; //возвращаем элемент по случайному индексу
}

function randomRobot(state){  //Функция принимает в себя объект класса VillageState вида {place: ... , parcels: [...]}
    return {direction: randomPick(roadGraph[state.place])}; //Возвращает объект со свойством direction, значением которого будет случайное
                                                            // место назначения из точки state.place в массиве roadGrapg
}

VillageState.random = function(parcelCount = 5){ //Задаём метод random класса VillageState, принимающий parcelCount - число посылок
    let parcels = []; //Создаём новый массив
    for(let i = 0; i < parcelCount; i++){ //Задаём цикл, который работает, пока не достигнет числа посылок
        let address = randomPick(Object.keys(roadGraph)); //Адрес - это случайный элемент массива ключей объекта roadGraph
        let place; //Заводим переменную place
        do{ //Условие while (place == address) проверяет, совпадает ли сгенерированное случайное 
            place = randomPick(Object.keys(roadGraph));
        } while(place == address); //место place с адресом address. Если они совпадают, цикл повторяется, и генерируется новое случайное место.
        parcels.push({place, address}); //Информация о созданной посылке добавляется в массив parcels в виде объекта со свойствами place и address.
    }
    return new VillageState("Почта", parcels); //Возвращается новый объект VillageState, представляющий случайное состояние деревни с созданными посылками и текущим местоположением "Почта".
};

runRobot(VillageState.random(), randomRobot);