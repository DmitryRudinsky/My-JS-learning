//Значения
"Чтобы иметь возможность работать с большим количеством битов и 76 потеряться среди них, нужно разделить их на куски,"
"представляющие отдельные фрагменты информации. В среде JavaScript эти куски называются значениями."
"Все значения состоят из битов, но все они играют разные роли. Каждое значение имеет тип, который определяет его роль."
"Одни значения являются числами, другие - фрагментами текста, третьи - функциями."

//Числа
"Значения числового типа, что неудивительно, являются числовыми значениями."
"Для хранения одиночного числового значения в JS применяется фиксированное количество битов - 64."
"Фактическое максимальное целое число, которое может быть сохранено, не превышает 10^15."
"Для больших и очень маленьких чисел также можно использовать экспоненциальную запись с добавлением буквы e(экспонента)."
"2.998е8 == 2,998 * 10 ^ 8 == 299800000."

//Специальные числа
"В JavaScript есть три специальных значения, которые считаются числами, но ведут себя не как обычные числа."
"Первые два - это infinity и -infinity, представляющие положительную и отрицательную бесконечность."
"Infinity - 1 - это всё ещё infinity. Однако не стоит слишклм доверять вычислениям на основе бесконечности."
"Подобное не имеет математического смысла и быстро приведёт к следующему специальному числу: NaN."
"NaN означает 'не число', хотя это значение числового типа. Такой результат можно получить, если, например,"
"попытаться вычислить 0/0, infinity - infinity или выполнить любую другую числовую операцию, которая не даёт осмысленного результата."

//Строки 
"Следующий основной тип данных - это строка. Строки используются для представления текста. Их записывают, заключая содержимое в кавычки."
"Внутри компьютера строки также представляются в виде последовательности битов. Способ, которым JS это делает, основан на стандарте Unicode."
"Строки нельзя делить, умножать или вычитать, но оператор + к ним применим. Он склеивает 2 строки."

//Унарные операции 
"Не все операторы обозначаются одним символом. Отдельно записываются словами - как, например, оператор typeof,"
"результатом которого является строковое значение, соответствующее типу значения предоставленного оператору."
console.log(typeof 4.5); //number
console.log(typeof 'x'); //string

"Операторы, задействуюшие 2 значения называются бинарными, а операторы , принимающие одно значение - унарными."

//Логические значения
"В js есть логический(булевый тип). Он имеет только 2 значения: истина и ложь."

//Сравнение 

console.log(3 > 2); //true
console.log(3 < 2); //false

"Строки также можно сравнивать аналогичным образом."
console.log("Арбуз" < "Яблоко"); //true


//Логические операторы 

"Существует ряд операций, которые применяются к самим логическим значениям."
"JS поддерживает 3 логических оператора: 'И', 'ИЛИ' и 'НЕ' "

"Оператор & - логическое 'И' "
console.log(true && false); //false
console.log(true && true); //true

"Оператор || обозначает логическое 'ИЛИ' "
console.log(true || false); //true
console.log(false || false); //false

"Операция 'НЕ' обозначается восклицательным знаком(!)"
console.log(!true); //false
console.log(!false); //true

//Условный оператор 
console.log(true ? 1 : 2); //1
console.log(false ? 1 : 2); //2
"Значения слева от знака вопроса 'выбирает', какое из двух дргуих значений станет результатом операции."
"Когда первое значение истинно, будет выбрано второе значение, а когда оно ложно - третье."

//Пустые значения 
"Есть 2 спец. значения, обозначаемые null и underfind, которые используются для описания отсутствия осмысленного значения."
