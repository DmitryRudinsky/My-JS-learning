"Существует два более или менее естественных способа ввести функцию в программу."

"Первый - когда обнаруживается, что вы несколько раз написали весьма похожий код."
"Поэтому вы берёте повторяющуюся функциональность, присваиваете ей подходящее имя и помещаете её в функцию."

"Второй способ заключается в том, что обнаруживается: вам нужен некий функционал, который вы ещё не написали, и он, похоже"
"заслуживает собственной функции. Вы начинаете с её названия, а затем пишете её тело."
"Вы можете даже сначала написать код, использующий эту функцию, и только потом фактически определить её саму."

"То, насколько легко удаётся подобрать удачное имя функции, - хороший показатель того, насколько вам ясна концепция, которую"
"вы пытаетесь описать. Рассмотрим это на примере."

function printFarmInventory(cows, chickens){
    let cowString = String(cows);
    while(cowString.length < 3){
        cowString = "0" + cowString;
    }
    console.log(`${cowString} коров`);
    let chickenString = String(chickens);
    while(chickenString.length < 3){
        chickenString = "0" + chickenString;
    }
    console.log(`${chickenString} цыплят`);
}

printFarmInventory(7, 11);

console.log("")

"Вместо того, чтобы выделять всю повторяющуюся часть программы одним куском,"
"попробуем представить в виде функции отдельную концепцию."

function zeroPad(number, width){
    let numberString = String(number);
    while(numberString.length < width){
        numberString = "0" + numberString;
    }
    return numberString;
}

function printFarmInventory2(cows, chickens, pigs){
    console.log(`${zeroPad(cows, 3)} коров`);
    console.log(`${zeroPad(chickens, 3)} цыплят`);
    console.log(`${zeroPad(pigs, 3)} свиней`);
}

printFarmInventory2(7, 11, 3)

"Встретив в коде функцию с красивым очевидным именем, таким как zeroPad, любой, кто читает код, легко поёмёт, что она делает."
"И потом, такая функция полезна не только в этой конкретной программе, но и в других ситуациях."

"Насколько умной должна быть функция?"
"Полезный принцип - не добавлять функционал, если вы не уверены, что он вам понадобится."
"Бывает, заманчиво написать обобщённый 'каркас' для каждой функциональности, которая вам встретилась."
"Так делать не стоить, так как вы просто будете писать код, который никогда не пригодится."

