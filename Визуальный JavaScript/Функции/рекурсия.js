"Для функции совершенно нормально вызывать саму себя, главное - не делать это слишко часто, чтобы не переполнять стек."
"Функция, вызывающая себя называется РЕКУРСИВНОЙ!"
"Рекурсия позволяет писать некоторые функции по-другому."
"Например:"
function power(base, exponent){
    if(exponent == 0){
        return 1;
    }else{
        return base * power(base, exponent - 1);
    }
}

console.log(power(2, 3)); //8

"Но у подобной реализации есть одна проблема: в типичных реализациях JS она работает примерно в три раза медленнее, чем версия с циклом."
"Выполнение просто цикла, как правило, менее затратно, чем многократный вызов функции."

"Что же выбрать? Скорость или элегантность кода?"
"Практически любую программу можно заставить работать быстрее, сделав её более длинной и запутанной."
"Программисту каждый раз приходится выбирать подходящий баланс."

"Всегда начинайте с написания чего-то понятного, что корректно работает. Если вас беспокоит слишком медленная работа, позже вы"
"всегда сможете измерить скорость и при необходимости улучшить код."

"Рекурсия не всегда является неэффективной альтернативой циклу."
"Некоторые проблемы действительно проще решить с помощью рекурсии, чем с помощью цикла."
"Чаще всего это проблемы, требующие изучения или обработки несольких ветвей кода, каждая из которых может, в свою очередь,"
"разделяться на ещё большее количество ветвей."

"Пример:"

function findSolution(target){
    function find(current, history){
        if(current == target){
            return history;
        } else if(current > target){
            return null;
        } else{
            return find(current + 5, `(${history} + 5)`) || find(current * 3, `(${history} * 3)`);
        }
    }
    return find(1, "1");
}

console.log(findSolution(13));

