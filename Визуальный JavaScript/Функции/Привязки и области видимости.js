"Каждая привязка имеет область видимости - это часть программы, в которой видна данная привязка."
"Для привязок, определённых вне какой-либо функции или блока, область видимости - это вся программа, и вы можете"
"ссылаться на такие привязки где хотите. Они называется ГЛОБАЛЬНЫМИ."

"Но на привязки, созданные как параметры функции или объявленные внутри неё, можно ссылаться только в данной функции, поэтому они называются"
"ЛОКАЛЬНЫМИ."
"Каждый раз, когда вызывается функция, создаются новые экземпляры этих привязок."
"Так обеспечивается некоторая изоляция между функциями - каждый их вызов действует в собственном маленьком мирке."

"Привязки, объявленные с помощью ключевых слов let и const, на самом деле являются локальными для блока,"
"внутри которого они объявлены. Поэтому если вы создадите одну из таких привязок внутри цикла,"
"то код до и после данного цикла не сможет его 'увидеть'. До 2015 года в JS только функции могли создавать новые области видимости,"
"поэтому привязки, созданные в старом стиле при помощи ключевого слова var, видны во всей функции, в которой они появились,"
"Либо во всей глобальной области видимости, если они не входят в функцию."

let x = 10;
if(true) {
    let y = 20;
    var z = 30;
    console.log(x + y + z); //60
}
//console.log(x + y + z) ReferenceError: y is not defined

"Каждая область видимости может 'выглядывать' в область, которая её окружает."
"Исключение составляют случаи, когда несколько привязок имеют одно и то же имя - "
"тогда код может иметь только самую внутреннюю из привязок."

const halve = function(n) {
    return n / 2;
}

let n = 10;
console.log(halve(100)); //50
console.log(n); //10
