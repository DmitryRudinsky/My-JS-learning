"Что происходит с локальными привязками, когда создавший их вызов функции больше не активен?"
"Пример:"

function wrapValue(n){
    let local = n;
    return () => local;
}

let wrap1 = wrapValue(1);
let wrap2 = wrapValue(2);
console.log(wrap1()); //1
console.log(wrap2()); //2

"Это допускается и работает так, как мы и рассчитывали, - оба экземпляра привязки доступны."
"Такая ситуация является хорошей демонстрацией того, что локальные привязки создаются заново для каждого вызова,"
"и один вызов не может уничтожить локальные привязки другого."

"Такое свойство - возможность ссылаться на конкретный экземпляр локальной привязки в пределах замкнутой области видимости - "
"называется ЗАМЫКАНИЕМ. Функция, которая ссылается на привязки из окружающих её локальных областей видимости, называется замыканием."

"Пример:"
function multiplier(factor) {
    return number => number * factor;
}

let twice = multiplier(2);
let threeTimes = multiplier(3);
let tenTimes = multiplier(10);

console.log(twice(5)); //10
console.log(threeTimes(8)); //24
console.log(tenTimes(40)); //400

"Явная привязка local из примера с wrapValue не нужна, так как сам параметр является локальной привязкой."

