console.log(String({name: "Dima", age: 18})); //[object Object]

"Когда вы вызываете функцию String для объекта, он вызывает метод toString для этого объекта,"
"чтобы попытаться сформировать из него осмысленную строку."

"В отдельных стандартных прототипах определена собвственная версия toString, поэтому"
"они позволяют создать строку, которая содержит больше полезной информации, чем [object Object]"
"Мы также можем сделать это сами."

class Rabbit{
    constructor(type){
        this.type = type;
    }

    speak(line){
        console.log(`${this.type} кролик говорит: ${line}`);
    }
}

Rabbit.prototype.toString = function(){
    return `${this.type} кролик`;
}
let blackRabbit = new Rabbit("Чёрный");
console.log(String(blackRabbit)); //Чёрный кролик


"Это простой пример мощной идеи. Если часть кода написана для работы с объектами, имеющими определённый интерфейс - "
"- в данном случае метод toString - то любой объект, который поддерживает указанный интерфейс,"
"может быть вставлен в этот код, и он будет работать."

"Подобная методика называется ПОЛИМОРФИЗМОМ."
"Полиморфный код может работать со значениями разных видов, если они поддерживают ожидаемый интерфейс."

"Например, цикл for/of"
"Это ещё один случай полиморфизма - такие циклы ожидают, что структура данных предоставит определённый интерфейс, как у массивов и строк."