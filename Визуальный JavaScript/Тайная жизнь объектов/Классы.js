"Система прототипов в JS может быть интерпретирована как несколько неформальная реализация"
"объектно-ориентированной концепции, называемой классами."

"Класс - вариант типа объекта, описывающий, какие методы и свойства имеет данный объект."
"Такой объект называется экземпляром класса."

"Прототипы полезны для определения свойств, имеющих одинаковое значение для всех экземпляров класса, таких как методы."
"Свойства, которые отличаются в каждом конкретном случае, такие как свойство type для наших кроликов,"
"должны храниться непосредственно в самих объектах."

"Таким образом, чтобы создать экземпляр данного класса, нужно создать объект, производный от выбранного прототипа,"
"но, кроме того, следует убедиться, что сам объект обладает свойствами, которые должны иметь экземпляры данного класса."
"Для этого используется функция конструктора."

let protoRabbit = {
    speak(line) {
        console.log(`${this.type} кролик говорит: '${line}'`);
    }
};

function makeRabbit(type) {
    let rabbit = Object.create(protoRabbit);
    rabbit.type = type;
    return rabbit;
}

"JS позволяет упростить определение функции этого типа. Если поставить перед вызовом функции ключевое слово new,"
"то функция будет считаться конструктором."
"Это означает, что в ней будет автоматически создан объект с выбранным прототипом, он будет привязан к this и возвращён"
"в конце выполнения функции."

let newRabbit = new makeRabbit("newRabbit");
console.log(newRabbit); //{ type: 'newRabbit' }
newRabbit.speak("I am newbye"); //newRabbit кролик говорит: 'I am newbye'

"Объект-прототип, используемый при построении объектов, определяется путём получения свойства prototype функции-конструктора"

function Rabbit(type){
    this.type = type;
}
Rabbit.prototype.speak = function(line){
    console.log(`The ${this.type} rabbit says: '${line}'`);
};

let weirdRabbit = new Rabbit("Weird");
console.log(weirdRabbit); //Rabbit { type: 'Weird' }
weirdRabbit.speak("I am strange...Dr Strage"); //The Weird rabbit says: 'I am strange...Dr Strage'

"Конструкторы, в сущности как и остальные функции, автоматически получают свойство с именем prototype,"
"которое по умолчанию содержит просто пустой объект, производный от Object.prototype."
"При желании его можно перезаписать новым объектом. Или же добавить свойства к существующему объекту, как в данном примере."

"По соглашению имена конструкторов пишутся с большой большой буквы, чтобы легко отличать их от других функций."

"Важно понимать различие между тем, как прототип связан с конструктором (через свойство prototype), и тем,"
"что у объектов есть прототип (который можно узнать с помощью Object.getPrototypeOf)."

"Настоящим прототипом конструктора выступает Function.prototype, так как конструкторы являются функциями."
"Его свойство prototype содержит прототип, используемый для создаваемых с его помощью экземпляров."

console.log(Object.getPrototypeOf(Rabbit) == Function.prototype); //true
console.log(Object.getPrototypeOf(weirdRabbit) == Rabbit.prototype); //true