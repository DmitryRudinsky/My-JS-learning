"Таким образом, классы в JS - это функции-конструкторы со свойством прототипа."
"Так они работают, и именно так до 2015 года их следовало писать. В наши дни появилась менее неуклюжая запись."

class Rabbit {
    constructor(type){
        this.type = type;
    }
    speak(line){
        console.log(`${this.type} кролик говорит: '${line}'`);
    }
}

let killerRabbit = new Rabbit("Убийственный");
let blackRabbit = new Rabbit("Чёрный");
console.log(killerRabbit); //Rabbit { type: 'Убийственный' }
killerRabbit.speak("УБЬЮ!"); //Убийственный кролик говорит: 'УБЬЮ!'
console.log(blackRabbit); //Rabbit { type: 'Чёрный' }
blackRabbit.speak("Я чёрный"); //Чёрный кролик говорит: 'Я чёрный'

"Ключевое слово class означает начало описания класса. В этом описании содержатся определение конструктора и набора методов -"
"- все в одном месте. В скобках описания класса может содержаться любое количество методов."
"Один из таких методов, с именем constructor, имеет специальное назначение."
"Он представлят собой функцию конструктора, которая будет связана с именем Rabbit."
"Остальные методы будут упакованы в прототип данного конструктора."
"Таким образом, это определение класса эквивалентно определению конструктора из предыдущего раздела, но выглядит лучше."

"В настоящее время определния классов позволяют создавать в прототипе только методы - свойства, которые содержат функции."
"Это бывает не очень удобно, если нужно сохранить в классе нефункциональные значения."
"Вероятно, в следующей версии языка это будет улучшено. Пока что мы можем создавать такие свойства,"
"непосредственно управляя прототипом после того, как определили класс."

"Подобно ключевому слову function, ключевое слово class может применяться как в инструкциях, так и в выражениях."
"При использовании в качестве выражения оно не определяет привязку, а лишь создаёт конструктор как значение."
"В выражении класса имя разрешается опустить."

let object = new class {getWord() {return "Привет";}};
console.log(object.getWord()); //Привет