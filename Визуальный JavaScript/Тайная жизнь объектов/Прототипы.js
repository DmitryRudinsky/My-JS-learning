let empty = {};
console.log(empty.toString); //[Function: toString]
console.log(empty.toString()); //[object Object]

"МЫ вытащили свойство из пустого объекта"

"Кроме набора свойств, у большинства объектов есть ПРОТОТИП."

"Прототипы в JavaScript - это механизм позволяющий наследовать объектам, свойства других объектов."
"Это другой объект, используемый в качестве дополнительного источника свойств."
"Когда объект получает запрос на свойство, которого у него нет, будет выполняться поиск такого свойства в его прототипе,"
"затем в прототипе прототипа и т.д."

"Object.prototype - это 'великий предок' всех прототипов, 'сущность', от которой происходят почти все объекты."

console.log(Object.getPrototypeOf({}) == Object.prototype); //true
console.log(Object.getPrototypeOf(Object.prototype)); //null
//Это означает, что у object.prototype нет прототипа.

"Object.getPrototypeOf() возвращает прототип объекта."

"Взаимосвязи между прототипами объектов в JS образуют древовидную структуру, и корнем этого дерева является"
"Object.prototype!"
"Данный объект предоставляет несколько методов, присущих всем объектам, так как метод toString,"
"который преобразует объект в строковое представление."

"Для многих объектов Object.prototype не выступает непосредственным прототипом - "
"вместо этого существует другой объект, который предоставляет по умолчанию другой набор свойств."
"Функции наследуются от Function.prototype, а массивы - от Array.prototype."

console.log(Object.getPrototypeOf(() => {}) == Function.prototype); //true
console.log(Object.getPrototypeOf([]) == Array.prototype); //true

"Каждый подобный объект-прототип имеет свой прототип , и часто это Object.prototype, который всё равно"
"неявно предоставляет такие методы, как toString."

"Для создания объекта с конкретным прототипом можно использовать Object.create"

let protoRabbit = {
    speak(line) {
        console.log(`${this.type} кролик говорит: '${line}'`);
    }
};

let killerRabbit = Object.create(protoRabbit);
killerRabbit.type = "Боевой";
killerRabbit.speak("...домой"); //Боевой кролик говорит: '...домой'

"Свойства, подобные speak(line), в объектном выражении являются кратким способом определения метода."
"При этом создаётся свойство с именем speak, значением которого будет функция."