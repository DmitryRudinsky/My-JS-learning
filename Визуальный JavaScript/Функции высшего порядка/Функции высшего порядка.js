"Функции, которые работают с другими фунцкциями, либо принимая их в качестве аргументов, либо возвращая их, называются"
"ФУНКЦИЯМИ ВЫСШЕГО ПОРЯДКА."
"Поскольку функции являются обычными значениями, в существовании функций высшего порядка нет ничего особоенно примечательного."

"Функции высшего порядка позволют абстрагироваться не только от значений, но и от действий."
"Функции высшего порядка бывают рахных выидов."

"Например, существуют функции, который создают новые функции:"
function greaterThan(n){
    return m => m > n;
}
let greaterThan10 = greaterThan(10);
console.log(greaterThan10(11)); //true

"И существуют функции, которые изменяют другие функции:"

function noisy(f){
    return (...args) => {
        console.log("вызов для", args);
        let result = f(...args);
        console.log("вызов для", args, "возвращает", result);
        return result;
    };
}

noisy(Math.min)(3, 2, 1);
/*
вызов для [ 3, 2, 1 ]
вызов для [ 3, 2, 1 ] возвращает 1
*/

"Можно даже написать функции, которые создают новые типы последовательности выполнения."

function repeat(n, action){
    for(let i = 0; i < n; i++){
        action(i);
    }
}

function unless(test, then){
    if (!test) then();
}

repeat(10, n => {
    unless(n % 2 == 1, () => {
        console.log(`${n} - чётное число`);
    })
})


"Существует встроенный метод для массивов forEach,, который представляет собой нечто вроде цикла for/of,"
"реализованного в виде функции высшего порядка.";

[1, 2, 3].forEach(element => {
    console.log(element * 2);
});
/*
2
4
6
*/