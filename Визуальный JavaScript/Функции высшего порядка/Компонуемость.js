const SCRIPTS = require("./scripts"); //Набор данных

"Функции высшего порядка начинают быть по-настояшему полезны, когда нужно СКОМПОНОВАТЬ операции."
"В качестве примера напишем код, который вычисляет средний год появления систем письма для живых и мёртвых языков в наборе данных."

function average(array) {
    return array.reduce((a, b) => a + b) / array.length;
}

console.log(Math.round(average(SCRIPTS.filter(s => s.living).map(s => s.year)))); //1165
console.log(Math.round(average(SCRIPTS.filter(s => !s.living).map(s => s.year)))); //204

"Таким образом, системы письма для мёртвых языков в Unicode в среднем старше, чем системы для живых языков."

"Это можно представить как конвейер: мы начинаем с анализа всех систем письма, отфильтровываем живые (или мёртвые),"
"берём годы их создания, вычисляем среднее значение и округляем результат."


"Данное вычисление также можно представить в виде одного большого цикла."
let total = 0, count = 0;
for(let script of SCRIPTS){
    if(script.living){
        total += script.year;
        count += 1;
    }
}
console.log(Math.round(total / count)); //1165


"С точки зрения того, что на самом деле деле делает компьютер, эти два подхода также принципиально различаются."
"Первый создаёт новые массивы при запуске filter и map, тогда как второй вычисляет только некоторые числа,"
"выполняя меньше работы." 
"Обычно мы можем позволить себе более легко читаемый вариант, но если приходится обрабатывать очень большие массивы"
"и делать это многократно, то менее абстрактный стиль может дать вам дополнительный выигрыш в скорости."